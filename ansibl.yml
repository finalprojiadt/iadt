---
- name: Create security group
  hosts: localhost
  connection: local
  gather_facts: false
  collections:
    - amazon.aws
  vars:
    region: us-east-2
  tasks:
    - name: Create security group
      amazon.aws.ec2_group:
        name: my-ansible-sg
        description: Security group for Ansible
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      register: sg

- name: Launch, provision EC2 instance and create AMI
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ami_name: my-custom-ami-1
    region: us-east-2
    instance_type: t2.micro
    key_name: "ansibl" # Replace this with the actual name of the existing key
    image: ami-0ccabb5f82d4c9af5
    private_key_file: /home/webserver/ansibl.pem # Path to your existing key
  tasks:
    - name: Launch EC2 instance
      amazon.aws.ec2:
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        region: "{{ region }}"
        key_name: "{{ key_name }}"
        group: "{{ sg.group_name }}" # Adjusted reference to the security group name
        wait: yes
        count: 1
      register: ec2_instance

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        state: started
      with_items: "{{ ec2_instance.instances }}"

    - name: Install python3, pip, git
      ansible.builtin.yum:
        name:
          - python3
          - python3-pip
          - git
        state: latest
      delegate_to: "{{ item.public_dns_name }}"
      private_key_file: "{{ private_key_file }}"
      with_items: "{{ ec2_instance.instances }}"

    - name: Install docker
      ansible.builtin.yum:
        name: docker
        state: latest
      delegate_to: "{{ item.public_dns_name }}"
      with_items: "{{ ec2_instance.instances }}"

    - name: Start Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes
      delegate_to: "{{ item.public_dns_name }}"
      with_items: "{{ ec2_instance.instances }}"

    - name: Create custom AMI
      amazon.aws.ec2_ami:
        instance_id: "{{ item.id }}"
        wait: yes
        name: "{{ ami_name }}"
        state: present
      with_items: "{{ ec2_instance.instances }}"

